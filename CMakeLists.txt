cmake_minimum_required(VERSION 3.10)

project(OpenDMARC VERSION 1.4.1)

# don't know if we use C17 features, so this might change to something older
set(C_STANDARD 17)
set(C_STANDARD_REQUIRED yes)

# hit me with those logs
set(CMAKE_VERBOSE_MAKEFILE ON)

add_subdirectory(libopendmarc)
add_subdirectory(opendmarc)

target_include_directories(libopendmarc PUBLIC
    "${PROJECT_BINARY_DIR}"
)

configure_file(opendmarc_conf.h.in opendmarc_conf.h)

# suspect code from stackoverflow :)
macro(CHECK_INCLUDE_FILE_ERROR INCLUDE_FILE HAVE_FILE)
    CHECK_INCLUDE_FILE_C(${INCLUDE_FILE} ${HAVE_FILE})
    IF(NOT ${HAVE_FILE})
        UNSET(HAVE_UNITTEST CACHE)
        message( FATAL_ERROR "${INCLUDE_FILE} is not found" )
    ENDIF()
endmacro()

# the following are from auto2cmake and should not really be trusted... for starters they screw up define names

# Option to Enable ENABLE_FILTER
option( ENABLE_FILTER "Enable ENABLE_FILTER" OFF )

# Option to Enable ENABLE_FILTER_TESTS
option( ENABLE_FILTER_TESTS "Enable ENABLE_FILTER_TESTS" OFF )

# Option to Enable ENABLE_LIVE_TESTS
option( ENABLE_LIVE_TESTS "Enable ENABLE_LIVE_TESTS" OFF )

# Option to Enable USE_SPF
option( USE_SPF "Enable USE_SPF" OFF )

# Option to AS_HELP_STRING([--disable-filter
option( [FILTER] "AS_HELP_STRING([--disable-filter" ON )

# Option to AS_HELP_STRING([--enable-filter-tests
option( [FILTER_TESTS] "AS_HELP_STRING([--enable-filter-tests" OFF )

# Option to AS_HELP_STRING([--enable-live-tests
option( [LIVE_TESTS] "AS_HELP_STRING([--enable-live-tests" OFF )

# Option to AS_HELP_STRING([--enable-whitelist-debug
option( [WHITELIST_DEBUG] "AS_HELP_STRING([--enable-whitelist-debug" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( ENABLE_FILTER )
    message(" ENABLE_FILTER Enabled")
    file(APPEND ${CONFIG_H} "/* Enable ENABLE_FILTER */\n")
    file(APPEND ${CONFIG_H} "#define [BUILD_FILTER] \n\n")
endif( ENABLE_FILTER )
if( ENABLE_FILTER_TESTS )
    message(" ENABLE_FILTER_TESTS Enabled")
    file(APPEND ${CONFIG_H} "/* Enable ENABLE_FILTER_TESTS */\n")
    file(APPEND ${CONFIG_H} "#define [FILTER_TESTS] \n\n")
endif( ENABLE_FILTER_TESTS )
if( ENABLE_LIVE_TESTS )
    message(" ENABLE_LIVE_TESTS Enabled")
    file(APPEND ${CONFIG_H} "/* Enable ENABLE_LIVE_TESTS */\n")
    file(APPEND ${CONFIG_H} "#define [LIVE_TESTS] \n\n")
endif( ENABLE_LIVE_TESTS )
if( USE_SPF )
    message(" USE_SPF Enabled")
    file(APPEND ${CONFIG_H} "/* Enable USE_SPF */\n")
    file(APPEND ${CONFIG_H} "#define [USE_SPF] \n\n")
## !!! WARNING USE_STRL_H Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define USE_STRL_H\n\n")
## !!! WARNING USE_BSD_H Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define USE_BSD_H\n\n")
## !!! WARNING WITH_SPF Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define WITH_SPF\n\n")
## !!! WARNING HAVE_SPF2_H Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define HAVE_SPF2_H\n\n")
endif( USE_SPF )
if( [FILTER] )
    message(" [FILTER] Enabled")
    file(APPEND ${CONFIG_H} "/* AS_HELP_STRING--disable-filter */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_[FILTER] \n\n")
endif( [FILTER] )
if( [FILTER_TESTS] )
    message(" [FILTER_TESTS] Enabled")
    file(APPEND ${CONFIG_H} "/* AS_HELP_STRING--enable-filter-tests */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_[FILTER_TESTS] \n\n")
endif( [FILTER_TESTS] )
if( [LIVE_TESTS] )
    message(" [LIVE_TESTS] Enabled")
    file(APPEND ${CONFIG_H} "/* AS_HELP_STRING--enable-live-tests */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_[LIVE_TESTS] \n\n")
endif( [LIVE_TESTS] )
if( [WHITELIST_DEBUG] )
    message(" [WHITELIST_DEBUG] Enabled")
    file(APPEND ${CONFIG_H} "/* AS_HELP_STRING--enable-whitelist-debug */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_[WHITELIST_DEBUG] \n\n")
## !!! WARNING DEBUG_WHITELIST Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define DEBUG_WHITELIST\n\n")
endif( [WHITELIST_DEBUG] )

## !!! WARNING These are the defines that were defined regardless of an option.
## !!! Or the script couldn't match them. Match them accordingly, delete them or keep them
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `__res_ninit' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_RES_NINIT 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `__res_ndestroy' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_RES_NDESTROY 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `inet_pton' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_INET_PTON 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `inet_ntop' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_INET_NTOP 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `getipnodebyname' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_GETADDRINFO 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `strlcat' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_STRLCAT 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you have the `strlcpy' function. */\n")
file(APPEND ${CONFIG_H} "#define HAVE_STRLCPY 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define to 1 if you need to include <opendmarc_strl.h> to get the `strlcat' and `strlcpy' functions. */\n")
file(APPEND ${CONFIG_H} "#define [USE_DMARCSTRL_H] 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define if libmilter has smfi_insheader */\n")
file(APPEND ${CONFIG_H} "#define [HAVE_SMFI_INSHEADER] 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define if libmilter has smfi_opensocket */\n")
file(APPEND ${CONFIG_H} "#define [HAVE_SMFI_OPENSOCKET] 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define if libmilter has smfi_progress */\n")
file(APPEND ${CONFIG_H} "#define [HAVE_SMFI_PROGRESS] 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define if libmilter has smfi_setsymlist */\n")
file(APPEND ${CONFIG_H} "#define [HAVE_SMFI_SETSYMLIST] 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Define if libmilter has smfi_version */\n")
file(APPEND ${CONFIG_H} "#define [HAVE_SMFI_VERSION] 1 \n\n ")

#target_link_libraries(opendmarc spf2 milter pthread)
